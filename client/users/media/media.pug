- var mTypes = '$$ JSON.stringify(N.models.users.MediaInfo.types) $$'
- var own_page = (self.runtime.user_hid === self.user_hid)
- self.add_raw_data('profile_tab', own_page)

#content.user-media-root(class=self.media.type & mTypes.MASK_DELETED ? 'deleted' : '')
  -
    const navbar_base = {
      level_up: self.link_to('users.album', { user_hid: self.user_hid, album_id: self.media.album, media_id: self.media.media_id })
    };

  != self.partial('@common.blocks.navbar.levelup_apps', navbar_base)

  nav.breadcrumbs-container
    .layout__container.container-fluid
      != self.partial('@users.blocks.breadcrumbs')

  .layout__container.container-fluid
    != self.partial('@common.blocks.announces')

    -
      var mType = self.media.type & ~mTypes.MASK_DELETED;
      var isImage = mType === mTypes.IMAGE;
      var isVideo = mType === mTypes.MEDIALINK;
      var isBinary = mType === mTypes.BINARY

    .user-media__container(
      class= isVideo ? 'user-media__m-video' : ''
      class= isBinary ? 'user-media__m-binary' : ''
    )
      .user-media__content
        if isImage
          -
            var imageUrl = self.link_to('core.gridfs', { 'bucket': self.media.media_id });
            var size = self.media.image_sizes.orig;

          .user-media__image-container
            span.user-media__image-outer(
              style= 'width:' + size.width + 'px'
            )
              img.user-media__image(src=imageUrl)
              span.user-media__image-spacer(
                style= 'padding-bottom:' + 100*size.height/size.width + '%'
              )

        else if isVideo
          .user-media__video
            != self.media.medialink_html

        else if isBinary
          .user-media__binary
            a.user-media__binary-link(
              href=self.link_to('core.gridfs', { bucket: self.media.media_id })
            )
              span.user-media__binary-icon.icon.icon-binary
              = self.media.file_name

      //- Prev / Next navigation
      if self.previous
        a.user-media__prev(
          href=self.link_to('users.media', { user_hid: self.user_hid, media_id: self.previous })
          title=self.t('prev')
        )
          span.user-media__prev-icon.icon.icon-chevron-big-left
      else
        .user-media__prev.user-media__m-disabled
          span.user-media__prev-icon.icon.icon-chevron-big-left

      if self.next
        a.user-media__next(
          href=self.link_to('users.media', { user_hid: self.user_hid, media_id: self.next })
          title=self.t('next')
        )
          span.user-media__next-icon.icon.icon-chevron-big-right
      else
        .user-media__next.user-media__m-disabled
          span.user-media__next-icon.icon.icon-chevron-big-right

      - var items = []

      if own_page
        - items.push('move')
        - items.push('delete')

      if self.settings.users_mod_can_delete_media
        if items.length > 0
          - items.push('divider')

        - items.push('header')
        - items.push('mod_delete')

      if items.length > 0
        .user-media__controls.hidden-deleted
          .user-media__control-item.dropdown.dropup
            - var menu_rnd_id = 'rnd' + self.get_label_uid()

            button.btn.btn-square.icon.icon-dropdown.dropdown-toggle(
              type='button'
              id=menu_rnd_id
              aria-haspopup='true'
              aria-expanded='false'
              data-bs-toggle='dropdown'
            )

            .dropdown-menu.dropdown-menu-end(aria-labelledby=menu_rnd_id)
              each item in items
                case item

                  when 'move'
                    button.dropdown-item(
                      data-on-click='users.media:edit'
                      data-media-id=self.media.media_id
                    )= self.t('move')

                  when 'delete'
                    button.dropdown-item(
                      data-on-click='users.media:delete'
                      data-media-id=self.media.media_id
                    )= self.t('delete')

                  when 'divider'
                    .dropdown-divider

                  when 'header'
                    .dropdown-header= self.t('mod_actions')

                  when 'mod_delete'
                    button.dropdown-item(
                      data-on-click='users.media:delete'
                      data-media-id=self.media.media_id
                      data-as-moderator='true'
                    )= self.t('delete')

    .hidden-deleted

      //-p= self.media.description
      //-p= self.date(self.media.ts, 'relative')

      .user-media__footer
        //-.user-media-comment__placeholder
        //-  .user-media-comment__aside
        //-    .user-media-comment__userpic-img.av-anon
        //-  .user-media-comment__inner
        //-    a.user-media-comment__placeholder-link(href='#')
        //-      = self.t('add_comment')

        .user-media-comments
          each comment in self.comments
            - var user = self.users[comment.user]

            article.user-media-comment
              .user-media-comment__aside
                if user
                  a.user-media-comment__userpic(href=self.link_to('users.member', { user_hid: user.hid }))
                    img.user-media-comment__userpic-img(alt=user.name)&attributes(self.avatar(user, 'md'))
                else if post.legacy_nick
                  span.user-media-comment__userpic
                    img.user-media-comment__userpic-img(alt=post.legacy_nick)&attributes(self.avatar(post.legacy_nick, 'md'))
                else
                  .user-media-comment__userpic-img.av-anon

              .user-media-comment__inner
                footer.user-media-comment__meta
                  .user-media-comment__author
                    if user
                      a.user-media-comment__author-link._ucard-popover(
                        href=self.link_to('users.member', { user_hid: user.hid })
                        data-user-id=user.id
                      )= user.name

                  .user-media-comment__ts
                    = self.date(comment.ts, 'relative')

                  .user-media-comment__controls.dropdown
                    - var local_menu_rnd_id = 'rnd' + self.get_label_uid()

                    a.user-media-comment__dropdown.icon.icon-dropdown-local.dropdown-toggle(
                      href='#'
                      type='button'
                      id=local_menu_rnd_id
                      aria-haspopup='true'
                      aria-expanded='false'
                      data-bs-toggle='dropdown'
                    )

                    .dropdown-menu.dropdown-menu-end(
                      aria-labelledby=local_menu_rnd_id
                    )
                      button.dropdown-item Report
                      button.dropdown-item Remove

                .user-media-comment__content= comment.text

    if own_page || self.settings.users_mod_can_delete_media
      .restore-notice.visible-deleted-block
        a.restore-notice__inner(
          href='#'
          data-on-click='users.media:restore'
          data-media-id=self.media.media_id
          data-as-moderator=String(!own_page)
        )= self.t('restore')
