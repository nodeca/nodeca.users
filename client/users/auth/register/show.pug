if (self.email)
  - self.add_raw_data('email', self.email)

- self.add_raw_data('action', 'register')

#content
  != self.partial('@common.blocks.navbar.logo_apps')

  .layout__container.container-fluid.space-top
    .row
      .col-md-6.col-sm-8.m-auto
        .card

          .card-header.d-flex.justify-content-between.align-items-center
            h1.h3.mb-0= self.head.title
            a(href=self.link_to('users.auth.login.show'))= self.t('login')

          form.card-body(data-on-submit='users.auth.register.exec')
            if self.oauth && Object.keys(self.oauth).length
              .mb-3
                != self.partial('@common.blocks.oauth_buttons')
                small.text-muted
                  =self.t('oauth_info')
            // ko with: email
            .mb-3
              label.form-label(for='register_email')= self.t('email')
              input.form-control(
                id='register_email'
                name='email'
                type='email'
                placeholder= self.t('email_desc')
                data-bind='value: value, css: { "is-invalid": error }'
              )
              // ko if: error && typeof error() === 'string'
              .invalid-feedback(data-bind='text: error')
              // /ko
            // /ko

            // ko with: pass
            .mb-3
              label.form-label(for='register_pass')= self.t('pass')
              input.form-control(
                id='register_pass'
                name='pass'
                type='password'
                placeholder= self.t('pass_desc')
                data-bind='value: value, css: { "is-invalid": error }'
              )
              // ko if: error && typeof error() === 'string'
              .invalid-feedback(data-bind='text: error')
              // /ko
              .form-text= self.t('pass_help')
            // /ko


            // ko with: nick
            .mb-3
              label.form-label(for='register_nick') #{self.t('nick')}
              input.form-control(
                id='register_nick',
                name='nick',
                type='text',
                placeholder= self.t('nick_desc')
                data-bind='value: value, valueUpdate: "afterkeydown", css: { "is-invalid": error }'
              )
              // ko if: error && typeof error() === 'string'
              .invalid-feedback(data-bind='text: error')
              // /ko
            // /ko

            // ko with: recaptcha_response_field
            != self.partial('@common.blocks.recaptcha')
            // /ko

            button.btn.btn-primary(type='submit') #{self.t('register')}
